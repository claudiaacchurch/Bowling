/* eslint-disable */
const scoreBoard = require("./scoreboard");
const frame = require("./frame");

describe("testing frame and scoreboard", () => {
  it("tests add a new frame normal 2 rolls", () => {
    const myFrame = new frame(5, 3);
    const myBoard = new scoreBoard();
    myBoard.addFrame(myFrame);
    expect(myBoard.frames.length).toEqual(1);
    expect(myBoard.frames[0].roll1).toEqual(5);
  });

  it("score current roll", () => {
    const myFrame = new frame(5, 3);
    const myBoard = new scoreBoard();
    myFrame.addRoll();
    myBoard.addFrame(myFrame);
    myBoard.scoreCurrentRoll();
    expect(myBoard.score).toEqual(8);
  });

  it("score current roll, when current roll isStrike", () => {
    const myFrame = new frame(10);
    const myBoard = new scoreBoard();
    myFrame.addRoll();
    myBoard.addFrame(myFrame);
    myBoard.scoreCurrentRoll();
    expect(myBoard.score).toEqual(10);
    expect(myFrame.isStrike).toEqual(true);
    expect(myFrame.isSpare).toEqual(false);
  });

  it("score current roll, when second roll 0", () => {
    const myFrame = new frame(7, 0);
    const myBoard = new scoreBoard();
    myFrame.addRoll();
    myBoard.addFrame(myFrame);
    myBoard.scoreCurrentRoll();
    expect(myBoard.score).toEqual(7);
    expect(myFrame.isStrike).toEqual(false);
    expect(myFrame.isSpare).toEqual(false);
  });

  it("score current roll, when current roll isSpare", () => {
    const myFrame = new frame(7, 3);
    const myBoard = new scoreBoard();
    myFrame.addRoll();
    myBoard.addFrame(myFrame);
    myBoard.scoreCurrentRoll();
    expect(myBoard.score).toEqual(10);
    expect(myFrame.isStrike).toEqual(false);
    expect(myFrame.isSpare).toEqual(true);
  });

  it("checkStrikeSpareStatus, when previous roll is a strike", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(7, 2);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    expect(myBoard.score).toEqual(28);
  });

  it("checkStrikeSpareStatus, when no previous", () => {
    const frameTwo = new frame(7, 2);
    const myBoard = new scoreBoard();
    frameTwo.addRoll();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    expect(myBoard.score).toEqual(9);
  });

  it("checkStrikeSpareStatus, when two strikes", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(10);
    const frameThree = new frame(7, 2);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    frameThree.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameThree);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    expect(myBoard.score).toEqual(55);
  });

  it("checkStrikeSpareStatus, when strikes and a spare", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(10);
    const frameThree = new frame(7, 3);
    const frameFour = new frame(2, 3);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    frameThree.addRoll();
    frameFour.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameThree);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFour);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    expect(myBoard.score).toEqual(64);
  });

  it("addBonusRoll, when strike on 10th go", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(10);
    const frameThree = new frame(7, 2);
    const frameFour = new frame(2, 3);
    const frameFive = new frame(7, 3);
    const frameSix = new frame(2, 4);
    const frameSeven = new frame(7, 2);
    const frameEight = new frame(2, 3);
    const frameNine = new frame(7, 1);
    const frameTen = new frame(10);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    frameThree.addRoll();
    frameFour.addRoll();
    frameFive.addRoll();
    frameSix.addRoll();
    frameSeven.addRoll();
    frameEight.addRoll();
    frameNine.addRoll();
    frameTen.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameThree);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFour);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFive);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSix);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSeven);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameEight);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameNine);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTen);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addBonusRoll(10);
    myBoard.addBonusRoll(10);
    expect(myBoard.score).toEqual(130);
  });

  it("addBonusRoll, when spare on 10th go", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(10);
    const frameThree = new frame(7, 2);
    const frameFour = new frame(2, 3);
    const frameFive = new frame(7, 3);
    const frameSix = new frame(2, 4);
    const frameSeven = new frame(7, 2);
    const frameEight = new frame(2, 3);
    const frameNine = new frame(7, 1);
    const frameTen = new frame(9, 1);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    frameThree.addRoll();
    frameFour.addRoll();
    frameFive.addRoll();
    frameSix.addRoll();
    frameSeven.addRoll();
    frameEight.addRoll();
    frameNine.addRoll();
    frameTen.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameThree);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFour);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFive);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSix);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSeven);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameEight);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameNine);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTen);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addBonusRoll(2);
    expect(myBoard.score).toEqual(112);
  });

  it("addBonusRoll, when nothing on 10th go", () => {
    const frameOne = new frame(10);
    const frameTwo = new frame(10);
    const frameThree = new frame(7, 2);
    const frameFour = new frame(2, 3);
    const frameFive = new frame(7, 3);
    const frameSix = new frame(2, 4);
    const frameSeven = new frame(7, 2);
    const frameEight = new frame(2, 3);
    const frameNine = new frame(7, 1);
    const frameTen = new frame(7, 1);
    const myBoard = new scoreBoard();
    frameOne.addRoll();
    frameTwo.addRoll();
    frameThree.addRoll();
    frameFour.addRoll();
    frameFive.addRoll();
    frameSix.addRoll();
    frameSeven.addRoll();
    frameEight.addRoll();
    frameNine.addRoll();
    frameTen.addRoll();
    myBoard.addFrame(frameOne);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTwo);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameThree);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFour);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameFive);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSix);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameSeven);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameEight);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameNine);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addFrame(frameTen);
    myBoard.scoreCurrentRoll();
    myBoard.checkStrikeSpareStatus();
    myBoard.addBonusRoll(2);
    expect(myBoard.score).toEqual(108);
  });

}); 
